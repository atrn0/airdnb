// tslint:disable
/**
 * airdnb API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GuestsGetReservationsRes
 */
export interface GuestsGetReservationsRes {
    /**
     * 
     * @type {Array<GuestsReservation>}
     * @memberof GuestsGetReservationsRes
     */
    reservations: Array<GuestsReservation>;
}
/**
 * 
 * @export
 * @interface GuestsGetRoomsRes
 */
export interface GuestsGetRoomsRes {
    /**
     * 
     * @type {Array<GuestsRoom>}
     * @memberof GuestsGetRoomsRes
     */
    rooms: Array<GuestsRoom>;
}
/**
 * 
 * @export
 * @interface GuestsPostUsersReq
 */
export interface GuestsPostUsersReq {
    /**
     * 
     * @type {string}
     * @memberof GuestsPostUsersReq
     */
    user_id: string;
    /**
     * 
     * @type {string}
     * @memberof GuestsPostUsersReq
     */
    name: string;
}
/**
 * 
 * @export
 * @interface GuestsReservation
 */
export interface GuestsReservation {
    /**
     * 
     * @type {string}
     * @memberof GuestsReservation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GuestsReservation
     */
    check_in: string;
    /**
     * 
     * @type {string}
     * @memberof GuestsReservation
     */
    check_out: string;
    /**
     * 
     * @type {string}
     * @memberof GuestsReservation
     */
    room_id: string;
    /**
     * 
     * @type {string}
     * @memberof GuestsReservation
     */
    room_name: string;
}
/**
 * 
 * @export
 * @interface GuestsRoom
 */
export interface GuestsRoom {
    /**
     * 
     * @type {string}
     * @memberof GuestsRoom
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GuestsRoom
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof GuestsRoom
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof GuestsRoom
     */
    host_id: string;
}
/**
 * 
 * @export
 * @interface HostsGetReservationsRes
 */
export interface HostsGetReservationsRes {
    /**
     * 
     * @type {Array<HostsReservation>}
     * @memberof HostsGetReservationsRes
     */
    reservations: Array<HostsReservation>;
}
/**
 * 
 * @export
 * @interface HostsGetRoomsRes
 */
export interface HostsGetRoomsRes {
    /**
     * 
     * @type {Array<HostsRoom>}
     * @memberof HostsGetRoomsRes
     */
    rooms: Array<HostsRoom>;
}
/**
 * 
 * @export
 * @interface HostsReservation
 */
export interface HostsReservation {
    /**
     * 
     * @type {string}
     * @memberof HostsReservation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof HostsReservation
     */
    check_in: string;
    /**
     * 
     * @type {string}
     * @memberof HostsReservation
     */
    check_out: string;
    /**
     * 
     * @type {string}
     * @memberof HostsReservation
     */
    room_id: string;
    /**
     * 
     * @type {string}
     * @memberof HostsReservation
     */
    room_name: string;
    /**
     * 
     * @type {string}
     * @memberof HostsReservation
     */
    guest_id: string;
    /**
     * 
     * @type {string}
     * @memberof HostsReservation
     */
    guest_name: string;
}
/**
 * 
 * @export
 * @interface HostsRoom
 */
export interface HostsRoom {
    /**
     * 
     * @type {string}
     * @memberof HostsRoom
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof HostsRoom
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof HostsRoom
     */
    price: number;
}
/**
 * 
 * @export
 * @interface PostReservationsReq
 */
export interface PostReservationsReq {
    /**
     * 
     * @type {string}
     * @memberof PostReservationsReq
     */
    check_in: string;
    /**
     * 
     * @type {string}
     * @memberof PostReservationsReq
     */
    check_out: string;
    /**
     * 
     * @type {string}
     * @memberof PostReservationsReq
     */
    room_id: string;
}
/**
 * 
 * @export
 * @interface PostRoomsReq
 */
export interface PostRoomsReq {
    /**
     * 
     * @type {string}
     * @memberof PostRoomsReq
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof PostRoomsReq
     */
    price: number;
}

/**
 * GuestsReservationsApi - axios parameter creator
 * @export
 */
export const GuestsReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 予約一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestsGetReservations: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/guests/reservations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい予約
         * @param {PostReservationsReq} postReservationsReq 新しい予約リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReservations: async (postReservationsReq: PostReservationsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postReservationsReq' is not null or undefined
            if (postReservationsReq === null || postReservationsReq === undefined) {
                throw new RequiredError('postReservationsReq','Required parameter postReservationsReq was null or undefined when calling postReservations.');
            }
            const localVarPath = `/guests/reservations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof postReservationsReq !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(postReservationsReq !== undefined ? postReservationsReq : {}) : (postReservationsReq || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestsReservationsApi - functional programming interface
 * @export
 */
export const GuestsReservationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 予約一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guestsGetReservations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestsGetReservationsRes>> {
            const localVarAxiosArgs = await GuestsReservationsApiAxiosParamCreator(configuration).guestsGetReservations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 新しい予約
         * @param {PostReservationsReq} postReservationsReq 新しい予約リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReservations(postReservationsReq: PostReservationsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestsReservation>> {
            const localVarAxiosArgs = await GuestsReservationsApiAxiosParamCreator(configuration).postReservations(postReservationsReq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GuestsReservationsApi - factory interface
 * @export
 */
export const GuestsReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 予約一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestsGetReservations(options?: any): AxiosPromise<GuestsGetReservationsRes> {
            return GuestsReservationsApiFp(configuration).guestsGetReservations(options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい予約
         * @param {PostReservationsReq} postReservationsReq 新しい予約リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReservations(postReservationsReq: PostReservationsReq, options?: any): AxiosPromise<GuestsReservation> {
            return GuestsReservationsApiFp(configuration).postReservations(postReservationsReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestsReservationsApi - object-oriented interface
 * @export
 * @class GuestsReservationsApi
 * @extends {BaseAPI}
 */
export class GuestsReservationsApi extends BaseAPI {
    /**
     * 予約一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsReservationsApi
     */
    public guestsGetReservations(options?: any) {
        return GuestsReservationsApiFp(this.configuration).guestsGetReservations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい予約
     * @param {PostReservationsReq} postReservationsReq 新しい予約リクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsReservationsApi
     */
    public postReservations(postReservationsReq: PostReservationsReq, options?: any) {
        return GuestsReservationsApiFp(this.configuration).postReservations(postReservationsReq, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * GuestsRoomsApi - axios parameter creator
 * @export
 */
export const GuestsRoomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 部屋の詳細情報を取得
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestsGetRoom: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling guestsGetRoom.');
            }
            const localVarPath = `/guests/rooms/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 部屋を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestsGetRooms: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/guests/rooms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestsRoomsApi - functional programming interface
 * @export
 */
export const GuestsRoomsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 部屋の詳細情報を取得
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guestsGetRoom(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestsRoom>> {
            const localVarAxiosArgs = await GuestsRoomsApiAxiosParamCreator(configuration).guestsGetRoom(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 部屋を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guestsGetRooms(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestsGetRoomsRes>> {
            const localVarAxiosArgs = await GuestsRoomsApiAxiosParamCreator(configuration).guestsGetRooms(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GuestsRoomsApi - factory interface
 * @export
 */
export const GuestsRoomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 部屋の詳細情報を取得
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestsGetRoom(roomId: string, options?: any): AxiosPromise<GuestsRoom> {
            return GuestsRoomsApiFp(configuration).guestsGetRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 部屋を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestsGetRooms(options?: any): AxiosPromise<GuestsGetRoomsRes> {
            return GuestsRoomsApiFp(configuration).guestsGetRooms(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestsRoomsApi - object-oriented interface
 * @export
 * @class GuestsRoomsApi
 * @extends {BaseAPI}
 */
export class GuestsRoomsApi extends BaseAPI {
    /**
     * 部屋の詳細情報を取得
     * @param {string} roomId Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsRoomsApi
     */
    public guestsGetRoom(roomId: string, options?: any) {
        return GuestsRoomsApiFp(this.configuration).guestsGetRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 部屋を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsRoomsApi
     */
    public guestsGetRooms(options?: any) {
        return GuestsRoomsApiFp(this.configuration).guestsGetRooms(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * GuestsUsersApi - axios parameter creator
 * @export
 */
export const GuestsUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 新しいユーザー(ゲスト)を作成
         * @param {GuestsPostUsersReq} guestsPostUsersReq 新しいユーザーの作成リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestsPostUsers: async (guestsPostUsersReq: GuestsPostUsersReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestsPostUsersReq' is not null or undefined
            if (guestsPostUsersReq === null || guestsPostUsersReq === undefined) {
                throw new RequiredError('guestsPostUsersReq','Required parameter guestsPostUsersReq was null or undefined when calling guestsPostUsers.');
            }
            const localVarPath = `/guests/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof guestsPostUsersReq !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(guestsPostUsersReq !== undefined ? guestsPostUsersReq : {}) : (guestsPostUsersReq || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestsUsersApi - functional programming interface
 * @export
 */
export const GuestsUsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 新しいユーザー(ゲスト)を作成
         * @param {GuestsPostUsersReq} guestsPostUsersReq 新しいユーザーの作成リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guestsPostUsers(guestsPostUsersReq: GuestsPostUsersReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsUsersApiAxiosParamCreator(configuration).guestsPostUsers(guestsPostUsersReq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GuestsUsersApi - factory interface
 * @export
 */
export const GuestsUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 新しいユーザー(ゲスト)を作成
         * @param {GuestsPostUsersReq} guestsPostUsersReq 新しいユーザーの作成リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestsPostUsers(guestsPostUsersReq: GuestsPostUsersReq, options?: any): AxiosPromise<void> {
            return GuestsUsersApiFp(configuration).guestsPostUsers(guestsPostUsersReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestsUsersApi - object-oriented interface
 * @export
 * @class GuestsUsersApi
 * @extends {BaseAPI}
 */
export class GuestsUsersApi extends BaseAPI {
    /**
     * 新しいユーザー(ゲスト)を作成
     * @param {GuestsPostUsersReq} guestsPostUsersReq 新しいユーザーの作成リクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsUsersApi
     */
    public guestsPostUsers(guestsPostUsersReq: GuestsPostUsersReq, options?: any) {
        return GuestsUsersApiFp(this.configuration).guestsPostUsers(guestsPostUsersReq, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * HostsReservationsApi - axios parameter creator
 * @export
 */
export const HostsReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 予約一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hostsGetReservations: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/hosts/reservations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HostsReservationsApi - functional programming interface
 * @export
 */
export const HostsReservationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 予約一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hostsGetReservations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostsGetReservationsRes>> {
            const localVarAxiosArgs = await HostsReservationsApiAxiosParamCreator(configuration).hostsGetReservations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HostsReservationsApi - factory interface
 * @export
 */
export const HostsReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 予約一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hostsGetReservations(options?: any): AxiosPromise<HostsGetReservationsRes> {
            return HostsReservationsApiFp(configuration).hostsGetReservations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HostsReservationsApi - object-oriented interface
 * @export
 * @class HostsReservationsApi
 * @extends {BaseAPI}
 */
export class HostsReservationsApi extends BaseAPI {
    /**
     * 予約一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostsReservationsApi
     */
    public hostsGetReservations(options?: any) {
        return HostsReservationsApiFp(this.configuration).hostsGetReservations(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * HostsRoomsApi - axios parameter creator
 * @export
 */
export const HostsRoomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 自分が掲載している部屋を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hostsGetRooms: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/hosts/rooms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しい部屋を掲載
         * @param {PostRoomsReq} postRoomsReq 新しい部屋の掲載リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRooms: async (postRoomsReq: PostRoomsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRoomsReq' is not null or undefined
            if (postRoomsReq === null || postRoomsReq === undefined) {
                throw new RequiredError('postRoomsReq','Required parameter postRoomsReq was null or undefined when calling postRooms.');
            }
            const localVarPath = `/hosts/rooms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof postRoomsReq !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(postRoomsReq !== undefined ? postRoomsReq : {}) : (postRoomsReq || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HostsRoomsApi - functional programming interface
 * @export
 */
export const HostsRoomsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 自分が掲載している部屋を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hostsGetRooms(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostsGetRoomsRes>> {
            const localVarAxiosArgs = await HostsRoomsApiAxiosParamCreator(configuration).hostsGetRooms(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 新しい部屋を掲載
         * @param {PostRoomsReq} postRoomsReq 新しい部屋の掲載リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRooms(postRoomsReq: PostRoomsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HostsRoomsApiAxiosParamCreator(configuration).postRooms(postRoomsReq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HostsRoomsApi - factory interface
 * @export
 */
export const HostsRoomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 自分が掲載している部屋を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hostsGetRooms(options?: any): AxiosPromise<HostsGetRoomsRes> {
            return HostsRoomsApiFp(configuration).hostsGetRooms(options).then((request) => request(axios, basePath));
        },
        /**
         * 新しい部屋を掲載
         * @param {PostRoomsReq} postRoomsReq 新しい部屋の掲載リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRooms(postRoomsReq: PostRoomsReq, options?: any): AxiosPromise<void> {
            return HostsRoomsApiFp(configuration).postRooms(postRoomsReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HostsRoomsApi - object-oriented interface
 * @export
 * @class HostsRoomsApi
 * @extends {BaseAPI}
 */
export class HostsRoomsApi extends BaseAPI {
    /**
     * 自分が掲載している部屋を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostsRoomsApi
     */
    public hostsGetRooms(options?: any) {
        return HostsRoomsApiFp(this.configuration).hostsGetRooms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新しい部屋を掲載
     * @param {PostRoomsReq} postRoomsReq 新しい部屋の掲載リクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostsRoomsApi
     */
    public postRooms(postRoomsReq: PostRoomsReq, options?: any) {
        return HostsRoomsApiFp(this.configuration).postRooms(postRoomsReq, options).then((request) => request(this.axios, this.basePath));
    }

}


